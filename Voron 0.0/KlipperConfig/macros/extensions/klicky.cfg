##############################################################################
# Deploy Klicky probe - attach probe
##############################################################################
[gcode_macro KLICKY_PROBE_DEPLOY]
gcode:
  {% set probe_attached = printer["gcode_macro _KLICKY_PROBE_STATE"].probe_attached|default(True) %}
  {% set probe_dock_position = printer["gcode_macro _USER_VARIABLE"].probe_dock_position %}
  {% set probe_after_position = printer["gcode_macro _USER_VARIABLE"].probe_position_after_dock %}
  {% set probe_z_min = printer["gcode_macro _USER_VARIABLE"].probe_z_min %}
  
  {% if not probe_attached %}
    G90
    G1 Z{probe_z_min} F6000
    G1 X{probe_dock_position.x - 30} Y{probe_dock_position.y} F6000
    SET_SERVO SERVO=klicky_servo ANGLE=180
    G1 X{probe_dock_position.x} F6000
    G1 Y{probe_dock_position.y + 40} F6000
    G1 X{probe_dock_position.x - 30} F6000
    SET_SERVO SERVO=klicky_servo ANGLE=0
    G1 X{probe_after_position.x} Y{probe_after_position.y} F6000
    _KLICKY_PROBE_CHECK ACTION=attach
  {% endif %}

##############################################################################
# Remove Klicky probe - detach probe
##############################################################################
[gcode_macro KLICKY_PROBE_REMOVE]
gcode:
  {% set probe_attached = printer["gcode_macro _KLICKY_PROBE_STATE"].probe_attached|default(True) %}
  {% set probe_dock_position = printer["gcode_macro _USER_VARIABLE"].probe_dock_position %}
  {% set probe_after_position = printer["gcode_macro _USER_VARIABLE"].probe_position_after_undock %}
  {% set probe_z_min = printer["gcode_macro _USER_VARIABLE"].probe_z_min %}

  {% if probe_attached %}
    G90
    G1 Z{probe_z_min} F6000
    G1 X{probe_dock_position.x - 30} Y{probe_dock_position.y + 40} F6000
    SET_SERVO SERVO=klicky_servo ANGLE=180
    G1 X{probe_dock_position.x} F6000
    G1 Y{probe_dock_position.y} Fs200
    G1 X{probe_dock_position.x - 30} F4000
    SET_SERVO SERVO=klicky_servo ANGLE=0
    G1 X{probe_after_position.x} Y{probe_after_position.y} F6000
    _KLICKY_PROBE_CHECK ACTION=dock
  {% endif %}

##############################################################################
# Check Klicky probe attached!
##############################################################################
[gcode_macro _KLICKY_PROBE_CHECK]
gcode:
  {% set action  = params.ACTION|default('') %}
  QUERY_PROBE
  _KLICKY_PROBE_STATE ACTION={action}

##############################################################################
# Check Klicky probe attached!
##############################################################################
[gcode_macro _KLICKY_PROBE_STATE]
variable_probe_attached: False
variable_probe_state:    'unknown' # unknown, docked, attached
gcode:
  {% set query_probe_triggered = printer.probe.last_query %}
  {% set action = params.ACTION|default('') %}

  # If triggered (true), probe not attached
  {% if query_probe_triggered %}
    SET_GCODE_VARIABLE MACRO=_KLICKY_PROBE_STATE VARIABLE=probe_attached VALUE={ False }
    SET_GCODE_VARIABLE MACRO=_KLICKY_PROBE_STATE VARIABLE=probe_state VALUE='"docked"'
  {% else %}
    SET_GCODE_VARIABLE MACRO=_KLICKY_PROBE_STATE VARIABLE=probe_attached VALUE={ True }
    SET_GCODE_VARIABLE MACRO=_KLICKY_PROBE_STATE VARIABLE=probe_state VALUE='"attached"'
  {% endif %}

  # If not docked, else set state
  {% if not query_probe_triggered and action == 'dock' %}
    { action_raise_error("Probe dock failed!") }
  {% endif %}

  # If not attached
  {% if query_probe_triggered and action == 'attach' %}
    { action_raise_error("Probe attach failed!") }
  {% endif %}

##############################################################################
# Check Klicky movements
##############################################################################
[gcode_macro _KLICKY_Z_MOVE_CHECK]
description: Helper: Check limit and perform move
gcode:
  {% set caller = params.CALLER|default('G0')|upper %}
  {% set force = params.FORCE|default(0)|int %}
  {% set z_min = printer['gcode_macro _USER_VARIABLE'].probe_z_min|float %}
  {% set z_act = printer.toolhead.position.z|float %}
  {% set probe_state = printer['gcode_macro _KLICKY_PROBE_STATE'].probe_state|lower %}

  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% if key is not in ['Z', 'CALLER', 'FORCE'] %}
      {% set get_params = get_params.append(key + params[key]) %}
    {% elif key is in ['Z'] %}
      {% if force == 1 %} ;manual override of probe check
        {% set get_params = get_params.append(key + params[key]) %}
      {% elif probe_state ==  'unknown' %}
        {action_raise_error("%s: KlickyProbe state %s run \"_KLICKY_PROBE_CHECK\"" % (caller, probe_state|upper))}
      {% elif probe_state ==  'docked' %}
        {% set get_params = get_params.append(key + params[key]) %}
      {% elif probe_state ==  'attached' %}
        ##### define move target position depending on absolute_coordinates #####
        {% if printer.gcode_move.absolute_coordinates|lower == 'true' %}
          {% set z_target = params.Z|float %}
        {% else %}
          {% set z_target = z_act + params.Z|float %}
        {% endif %}
        ##### decide if a Z move can be executed #####
        {% if z_target > z_min or z_act < z_target %}
          {% set get_params = get_params.append(key + params[key]) %}              
        {% else %}
          {action_respond_info("%s: Z Moves lower than %.1fmm not allowed with installed probe" % (caller,z_min))}  
        {% endif %}
      {% else %}
        {action_raise_error("%s: KlickyProbe state %s not valid" % (caller, probe_state|upper))}
      {% endif %}
    {% endif %}
  {% endfor %}
  ##### end of definitions #####
  {caller}.1 {get_params|join(" ")}