[gcode_macro _SET_LED_COLOR]
#use: _SET_LED_COLOR R=0 G=0 B=0 I=0
gcode:
  {% set r_color = params.R|default(0)|float %}
  {% set g_color = params.G|default(0)|float %}
  {% set b_color = params.B|default(0)|float %}
  {% set index = params.I|default(0)|int %}
  {% set led_target_name = printer['gcode_macro _USER_VARIABLE'].led_name|default('') %}

  {% if index > 0 %}
    SET_LED LED={led_target_name} RED={r_color} GREEN={g_color} BLUE={b_color} INDEX={index} TRANSMIT=1
  {% else %}
    SET_LED LED={led_target_name} RED={r_color} GREEN={g_color} BLUE={b_color} TRANSMIT=1
  {% endif %}

[gcode_macro _SET_LED_COLOR_TEMP]
#use: _SET_LED_COLOR_TEMP CURRENT_TEMP=0 MAX_TEMP=270
gcode:
  ### Parameter übernehmen
  {% set currentTemp = params.CURRENT_TEMP|default(0)|float %}
  {% set maxPresetTemp = printer['gcode_macro _USER_VARIABLE'].extruder_temp_max %}
  {% set maxTemp = params.MAX_TEMP|default(maxPresetTemp)|float %}

  ### Prüfe die Werte
  {% if currentTemp < 0 %}
      {% set currentTemp = 0 %}
  {% endif %}
  {% if maxTemp <= 0 %}
      {% set maxTemp = maxPresetTemp %}
  {% endif %}
  {% if maxTemp > maxPresetTemp %}
      {% set maxTemp = maxPresetTemp %}
  {% endif %}

  {% set scalerRed = (((currentTemp|float / maxTemp|float) * 10)|int)|float / 10 %}
  {% set scalerGreen = (1 - scalerRed) %}

  ### LEDs aktualisieren
  _SET_LED_COLOR R={ scalerRed|float * 1 } G={ scalerGreen|float * 1 } B=0

[gcode_macro _LED_SHIFT]
gcode:
  ### Ermittle die Anzahl der LEDs und Farbe der letzten LED
  {% set ledCount = printer['gcode_macro _USER_VARIABLE'].led_count|default(0) %}
  {% set led_target_name_full = printer['gcode_macro _USER_VARIABLE'].led_name_full|default('') %}
  {% set ledColorLast = printer[led_target_name_full].color_data[ledCount-1] %}

  ### Setze LED Farben immer 1 nach hinten, angefangen bei der Vorletzten LED
  {% set ledCount = ledCount - 1 %}
  {% for wipe in range(ledCount) %}
    {% set targetLed = ledCount - wipe + 1 %}
    {% set sourceLed = ledCount - wipe - 1 %}
    _SET_LED_COLOR R={printer[led_target_name_full].color_data[sourceLed]['R']|float} G={printer[led_target_name_full].color_data[sourceLed]['G']|float} B={printer[led_target_name_full].color_data[sourceLed]['B']|float} I={targetLed}
  {% endfor %}

  ### Erste LED setzen
  _SET_LED_COLOR R={ledColorLast['R']|float} G={ledColorLast['G']|float} B={ledColorLast['B']|float} I=1

[gcode_macro _LED_STATE_STORE]
#use: _LED_STATE_STORE OP=0
variable_led_store: []
gcode:
  ### Parameter setzen
  {% set operation = params.OP|default(1)|int %}
  {% set led_target_name_full = printer['gcode_macro _USER_VARIABLE'].led_name_full|default('') %}
  {% set led_current_data = printer[led_target_name_full].color_data %}
  {% set ledCount = printer['gcode_macro _USER_VARIABLE'].led_count|default(0) %}

  ### Sichern der Daten 
  {% if operation == 1 %}
    SET_GCODE_VARIABLE MACRO=_LED_STATE_STORE VARIABLE=led_store VALUE="{led_current_data}"

  ### Ursprungsfarbe wieder herstellen
  {% else %}
    {% set led_current_data = printer['gcode_macro _LED_STATE_STORE'].led_store %}
    {% for wipe in range(ledCount) %}
      _SET_LED_COLOR R={led_current_data[wipe].R} G={led_current_data[wipe].G} B={led_current_data[wipe].B} I={(wipe + 1)|int}
    {% endfor %}
  {% endif %}

[delayed_gcode _LED_POWER_ON_SEQUENCE]
initial_duration: 0
gcode:
  ### Parameter setzen
  {% set currentSeq = printer['gcode_macro _USER_VARIABLE'].led_startseq %}
  {% set ledCount = printer['gcode_macro _USER_VARIABLE'].led_count|default(0) %}
  {% set sequenceMax = (ledCount * 2) + 1 %}

  ### Initialsequenz
  {% if currentSeq == 0 %}
    _LED_STATE_STORE OP=1
    _SET_LED_COLOR R=1 G=0 B=0 I={(currentSeq + 1)|int}

  ### Iteration 
  {% else %}
    _LED_SHIFT
  {% endif %}

  ### Daten setzen
  {% set currentSeq = currentSeq + 1 %}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=led_startseq VALUE={currentSeq}

  ### Abbruch der Sequenz
  {% if currentSeq < sequenceMax %}
    UPDATE_DELAYED_GCODE ID=_LED_POWER_ON_SEQUENCE DURATION=0.3
  {% else %}
    _LED_STATE_STORE OP=2
  {% endif %}